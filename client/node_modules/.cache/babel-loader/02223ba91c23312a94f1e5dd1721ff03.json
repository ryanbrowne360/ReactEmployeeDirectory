{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Super Dad\\\\Desktop\\\\Code_Bootcamp\\\\reactapp\\\\src\\\\components\\\\Form\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./style.css\";\n\nfunction Form() {\n  _s();\n\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n\n  function handleInputChange(event) {\n    // Getting the value and name of the input which triggered the change\n    const {\n      name,\n      value\n    } = event.target;\n    if (name === 'firstName') setFirstName(value);else if (name === 'lastName') setLastName(value);else if (name === 'password') setPassword(value);\n  }\n\n  ;\n\n  function handleFormSubmit(event) {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault(); // Alert the user their first and last name, clear `firstName` and `lastName`, clearing the inputs\n\n    alert(`Hello ${firstName} ${lastName}`);\n    setFirstName(\"\");\n    setLastName(\"\");\n  }\n\n  ; // Notice how each input has a `value`, `name`, and `onChange` prop\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", firstName, \" \", lastName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: firstName,\n        name: \"firstName\",\n        onChange: handleInputChange,\n        type: \"text\",\n        placeholder: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: lastName,\n        name: \"lastName\",\n        onChange: handleInputChange,\n        type: \"text\",\n        placeholder: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: password,\n        name: \"password\",\n        onChange: handleInputChange,\n        type: \"text\",\n        placeholder: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"Rv/BF98X0eVnKBllHOCWTMURBww=\");\n\n_c = Form;\nexport default Form;\n/*pdate the `Form` component to add the following:\n\n  1. A new input field that updates `this.state.password`.\n\n     * Set the initial value of `this.state.password` to an empty string.\n\n  2. Whenever a user clicks the \"Submit\" button, add code to accomplish the following:\n\n     1. If the user hasn't provided a first and last name, throw an alert saying: \"Fill out your first and last name please!\".\n\n     2. If the user has provided a first and last name, but their password is less than 6 characters, throw an alert saying, \"Choose a more secure password,\" followed by the full name. E.g. \"Choose a more secure password, John Smith!\"\n\n     3. Else, throw an alert to greet the user. E.g. \"Hello, John Smith!\".\n\n  3. Do not allow the user to type in a password that is longer than 15 characters. i.e. the length of the password state should never go beyond 15 characters.\n\n### Hints\n\n* You may want to look into using [String.prototype.substring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) to prevent the password field from going beyond 15 characters.\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/Super Dad/Desktop/Code_Bootcamp/reactapp/src/components/Form/index.js"],"names":["React","useState","Form","password","setPassword","firstName","setFirstName","lastName","setLastName","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","alert"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,aAAP;;AAIA,SAASC,IAAT,GAAgB;AAAA;;AAEd,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASQ,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AAEA,QAAIF,IAAI,KAAK,WAAb,EACEL,YAAY,CAACM,KAAD,CAAZ,CADF,KAEK,IAAID,IAAI,KAAK,UAAb,EACHH,WAAW,CAACI,KAAD,CAAX,CADG,KAEA,IAAID,IAAI,KAAG,UAAX,EACLP,WAAW,CAACQ,KAAD,CAAX;AACD;;AAAA;;AAED,WAASE,gBAAT,CAA0BJ,KAA1B,EAAiC;AAC/B;AACAA,IAAAA,KAAK,CAACK,cAAN,GAF+B,CAI/B;;AACAC,IAAAA,KAAK,CAAE,SAAQX,SAAU,IAAGE,QAAS,EAAhC,CAAL;AACAD,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD;;AAAA,GA1Ba,CA4Bd;;AACA,sBACE;AAAA,4BACE;AAAA,2BACSH,SADT,OACqBE,QADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACE;AACE,QAAA,KAAK,EAAEF,SADT;AAEE,QAAA,IAAI,EAAC,WAFP;AAGE,QAAA,QAAQ,EAAEI,iBAHZ;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AACE,QAAA,KAAK,EAAEF,QADT;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,QAAQ,EAAEE,iBAHZ;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,cARF,eAeE;AACE,QAAA,KAAK,EAAEN,QADT;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,QAAQ,EAAEM,iBAHZ;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,cAfF,eAuBE;AAAQ,QAAA,OAAO,EAAEK,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GA7DQZ,I;;KAAAA,I;AA+DT,eAAeA,IAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Form() {\n\n  const [password, setPassword] = useState(\"\")\n  const [firstName, setFirstName] = useState(\"\")\n  const [lastName, setLastName] = useState(\"\")\n\n  function handleInputChange(event) {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    if (name === 'firstName')\n      setFirstName(value)\n    else if (name === 'lastName')\n      setLastName(value)\n    else if (name==='password')\n    setPassword(value)\n  };\n\n  function handleFormSubmit(event) {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    // Alert the user their first and last name, clear `firstName` and `lastName`, clearing the inputs\n    alert(`Hello ${firstName} ${lastName}`);\n    setFirstName(\"\")\n    setLastName(\"\")\n  };\n\n  // Notice how each input has a `value`, `name`, and `onChange` prop\n  return (\n    <div>\n      <p>\n        Hello {firstName} {lastName}\n      </p>\n      <form className=\"form\">\n        <input\n          value={firstName}\n          name=\"firstName\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"First Name\"\n        />\n        <input\n          value={lastName}\n          name=\"lastName\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"Last Name\"\n        />\n        <input\n          value={password}\n          name=\"password\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"password\"\n          />\n\n        <button onClick={handleFormSubmit}>Submit</button>\n      </form>\n    </div >\n  );\n}\n\nexport default Form;\n\n/*pdate the `Form` component to add the following:\n\n  1. A new input field that updates `this.state.password`.\n\n     * Set the initial value of `this.state.password` to an empty string.\n\n  2. Whenever a user clicks the \"Submit\" button, add code to accomplish the following:\n\n     1. If the user hasn't provided a first and last name, throw an alert saying: \"Fill out your first and last name please!\".\n\n     2. If the user has provided a first and last name, but their password is less than 6 characters, throw an alert saying, \"Choose a more secure password,\" followed by the full name. E.g. \"Choose a more secure password, John Smith!\"\n\n     3. Else, throw an alert to greet the user. E.g. \"Hello, John Smith!\".\n\n  3. Do not allow the user to type in a password that is longer than 15 characters. i.e. the length of the password state should never go beyond 15 characters.\n\n### Hints\n\n* You may want to look into using [String.prototype.substring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) to prevent the password field from going beyond 15 characters.\n*/"]},"metadata":{},"sourceType":"module"}